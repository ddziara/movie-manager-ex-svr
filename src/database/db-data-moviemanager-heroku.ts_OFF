import { DBDataMovieManager } from "./db-data-moviemanager";
import { DB } from "./db-db";
import { DBTable } from "./db-table";
import DEBUG from 'debug';
import { MissingLastIdError } from "../common/errors";
import { setupPostgresParsers } from "./data-parser-postgres";

const debug_db = DEBUG.debug('backend:DB')

// for optional imports
import type { Pool as PoolType, PoolClient } from 'pg';
import { DBcldb } from "./db-db-cldb";
import { AppPlatformType } from "../common/types";
import { DBextra } from "./db-db-extra";
import { DBmedia_scanner_cache } from "./db-db-media-scanner-cache";
import { DBmoviemedia } from "./db-db-moviemedia";
import { DBplaylist } from "./db-db-playlist";
// for optional imports [END]

const DATABASE_URL = process.env['DATABASE_URL'];

// for optional imports
let Pool: typeof PoolType;

({ Pool } = require('pg'));
setupPostgresParsers();

// for optional imports [END]

const appPlatform: AppPlatformType = 'postgress';

export class DBDataMovieManagerHeroku extends DBDataMovieManager {
    private pool: PoolType | undefined = undefined;
    private client: PoolClient | undefined = undefined;

    constructor() {
        super(new DBcldb(appPlatform), new DBextra(appPlatform), new DBmedia_scanner_cache(appPlatform), new DBmoviemedia(appPlatform), new DBplaylist(appPlatform));
    }

    async createSchemaCreateTables(db: DB, client: PoolClient): Promise<void> {
        await client.query(`CREATE SCHEMA IF NOT EXISTS ${db.name}`);

        let index = 0;
        let table: DBTable | null;

        while ((table = db.getTable(index++)) !== null) {
            const aSql: string[] = table.getSQLCreateText(true, false, true);

            for (const sql of aSql) {
                try {
                    await client.query(sql);
                }
                catch (e) {
                    debug_db(`Creating table '${table.name} sql=${sql}' failed`);
                    throw e;
                }
            }
        }
    }

    async init(): Promise<DBDataMovieManagerHeroku> {
        this.ready = false;

        this.pool = new Pool({
            connectionString: DATABASE_URL,
            ssl: {
                rejectUnauthorized: false
            }
        });

        const client = await this.pool.connect();

        try {
            await Promise.all([
                (async () => {
                    try {
                        await this.createSchemaCreateTables(this.dbcldb, client);
                        debug_db(`Schema 'CLDB' set up.`);
                    }
                    catch (e) {
                        debug_db(`Setting up Schema 'CLDB' failed`);
                        throw e;
                    }
                })(),
                (async () => {
                    try {
                        await this.createSchemaCreateTables(this.dbmoviemedia, client);
                        debug_db(`Schema 'moviemedia' set up.`);
                    }
                    catch (e) {
                        debug_db(`Setting up Schema 'moviemedia' failed`);
                        throw e;
                    }
                })(),
                (async () => {
                    try {
                        await this.createSchemaCreateTables(this.dbmediaScannerCache, client);
                        debug_db(`Schema 'mediaScannerCache' set up.`);
                    }
                    catch (e) {
                        debug_db(`Setting up Schema 'mediaScannerCache' failed`);
                        throw e;
                    }
                })(),
                (async () => {
                    try {
                        await this.createSchemaCreateTables(this.dbplaylist, client);
                        debug_db(`Schema 'playlist' set up.`);
                    }
                    catch (e) {
                        debug_db(`Setting up Schema 'playlist' failed`);
                        throw e;
                    }
                })(),
                (async () => {
                    try {
                        this.createSchemaCreateTables(this.dbextra, client);
                        debug_db(`Schema 'extra' set up.`);
                    }
                    catch (e) {
                        debug_db(`Setting up Schema 'extra' failed`);
                        throw e;
                    }
                })()
            ]);
        }
        catch (e) {
            throw e;
        }
        finally {
            client.release();
        }

        this.ready = true;

        // note: it has to be after this.ready is set to true
        await this.initMoviesTable();
        return this;
    }

    async uninit(): Promise<void> {
        this.pool = undefined;
        this.ready = false;
    }

    async beginTransaction(): Promise<void> {
        if (this.pool) {
            this.client = await this.pool.connect();
            await super.beginTransaction();
        }
    }

    async commitTransaction(): Promise<void> {
        if (this.client) {
            try {
                await super.commitTransaction();
            }
            catch (e) {
                throw e;
            }
            finally {
                this.client.release();
                this.client = undefined;
            }
        }
    }

    async rollbackTransaction(): Promise<void> {
        if (this.client) {
            try {
                await super.rollbackTransaction();
            }
            catch (e) {
                throw e;
            }
            finally {
                this.client.release();
                this.client = undefined;
            }
        }
    }

    /**
     * 
     * @param sql - 
     * @param columns - array of names of outputted columns 
     * @param params 
     */
    async execQuery(sql: string, ...params: any[]): Promise<any[]> {
        if (DBDataMovieManagerHeroku.count > 0) {
            console.log(`execQuery(): CNT=${DBDataMovieManagerHeroku.count} sql=${sql}, params = ${params}, params.length = ${params.length}`);
            DBDataMovieManagerHeroku.count--;
        }

        if (this.pool === undefined) throw new Error('this.pool is undefined');

        let client: PoolClient | undefined = this.client;
        let privateClient: boolean = false;

        if (!client) {      // non-transaction case
            client = await this.pool.connect();
            privateClient = true;
        }

        try {
            const result = await client.query(sql, params);

            return result.rows;
        }
        catch (e) {
            throw e;
        }
        finally {
            if (privateClient) client.release();
        }
    }

    async execRetID(id: string, sql: string, ...params: any[]): Promise<number> {
        if (DBDataMovieManagerHeroku.count > 0) {
            console.log(`execRetID(): CNT=${DBDataMovieManagerHeroku.count} sql=${sql}`);
            DBDataMovieManagerHeroku.count--;
        }

        if (this.pool === undefined) throw new Error('this.pool is undefined');

        let client: PoolClient | undefined = this.client;
        let privateClient: boolean = false;

        if (!client) {      // non-transaction case
            client = await this.pool.connect();
            privateClient = true;
        }

        try {
            const res = await client.query(sql + ` RETURNING ${id}`, params);

            if (res && (res.rowCount === 1)) {
                return res.rows[0][id.toLowerCase()];
            }
            else
                throw new MissingLastIdError("Row id unavailable");
        }
        catch (e) {
            throw e;
        }
        finally {
            if (privateClient) client.release();
        }
    }

    async execRetVoid(sql: string, ...params: any[]): Promise<void> {
        if (DBDataMovieManagerHeroku.count > 0) {
            console.log(`execRetVoid(): CNT=${DBDataMovieManagerHeroku.count} sql=${sql}`);
            DBDataMovieManagerHeroku.count--;
        }

        if (this.pool === undefined) throw new Error('this.pool is undefined');

        let client: PoolClient | undefined = this.client;
        let privateClient: boolean = false;

        if (!client) {      // non-transaction case
            client = await this.pool.connect();
            privateClient = true;
        }

        try {
            await client.query(sql, params);
        }
        catch (e) {
            throw e;
        }
        finally {
            if (privateClient) client.release();
        }
    }

    getSQLParameter(index: number): string {
        return `?`;
    }

    //=====================
    static count: number;
    static armReport(count: number): void {
        DBDataMovieManagerHeroku.count = count;
    }

    //=====================
    async initMoviesTable(): Promise<void> {
        await this.clearTable(this.dbmoviemedia.media_info);


        /* 001 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Star Wars: Episode IV - New Hope, A (1977)`, `C:\\Movies\\Star Wars; Episode IV - A New Hope (1977)\\Star Wars.Episode.IV.A.New.Hope.(1977).mkv`]);
        /* 002 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Star Wars: Episode V - Empire Strikes Back, The (1980)`, `C:\\Movies\\Star Wars; Episode V - The Empire Strikes Back (1980)\\Star.Wars.Episode.V.The.Empire.Strikes.Back.(1980).mkv`]);
        /* 003 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Star Wars: Episode VI - Return of the Jedi (1983)`, `C:\\Movies\\Star Wars; Episode VI - Return of the Jedi (1983)\\Star.Wars.Episode.VI.Return.of.the.Jedi.(1983).mkv`]);
        /* 004 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Star Wars: Episode I - Phantom Menace, The (1999)`, `C:\\Movies\\Star Wars; Episode I - The Phantom Menace (1999)\\Star.Wars.Episode.I.The.Phantom.Menace.(1999).mkv`]);
        /* 005 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Star Wars: Episode II - Attack of the Clones (2002)`, `C:\\Movies\\Star Wars; Episode II - Attack of the Clones (2002)\\Star.Wars.Episode.II.Attack.of.the.Clones.(2002).mkv`]);
        /* 006 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Star Wars: Episode III - Revenge of the Sith (2005)`, `C:\\Movies\\Star Wars; Episode III - Revenge of the Sith (2005)\\Star.Wars.Episode.III.Revenge.of.the.Sith.(2005).mkv`]);

        /* 007 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`The Matrix (1999)`, `C:\\Movies\\Matrix, The (1999)\\The.Matrix.(1999).mkv`]);
        /* 008 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`The Matrix Reloaded (2003)`, `C:\\Movies\\Matrix Reloaded, The (2003)\\The.Matrix.Reloaded.(2003).mkv`]);
        /* 009 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`The Matrix Revolutions (2003)`, `C:\\Movies\\Matrix Revolutions, The (2003)\\The.Matrix.Revolutions.(2003).mkv`]);
        /* 010 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`The Animatrix (2003)`, `C:\\Movies\\Animatrix, The (2003)\\The.Animatrix.(2003).mkv`]);

        /* 011 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Alien (1979)`, `C:\\Movies\\Alien (1979)\\Alien.(1979).mkv`]);
        /* 012 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Aliens (1986)`, `C:\\Movies\\Aliens (1986)\\Aliens.(1986).mkv`]);
        /* 013 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Alien 3 (1992)`, `C:\\Movies\\Alien 3 (1992)\\Alien.3.(1992).mkv`]);
        /* 014 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Alien: Resurrection (1997)`, `C:\\Movies\\Alien; Resurrection (1997)\\Alien.Resurrection.(1997).mkv`]);

        /* 015 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Raiders of the Lost Ark (1981)`, `C:\\Movies\\Raiders of the Lost Ark (1981)\\Raiders.of.the.Lost.Ark.(1981).mkv`]);
        /* 016 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Indiana Jones and the Temple of Doom (1984)`, `C:\\Movies\\Indiana Jones and the Temple of Doom (1984)\\Indiana.Jones.and.the.Temple.of.Doom.(1984).mkv`]);
        /* 017 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Indiana Jones and the Last Crusade (1989)`, `C:\\Movies\\Indiana Jones and the Last Crusade (1989)\\Indiana.Jones.and.the.Last.Crusade.(1989).mkv`]);
        /* 018 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Indiana Jones and the Kingdom of the Crystal Skull (2008)`, `C:\\Movies\\Indiana Jones and the Kingdom of the Crystal Skull (2008)\\Indiana.Jones.and.the.Kingdom.of.the.Crystal.Skull.(2008).mkv`]);

        /* 019 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`The Terminator (1984)`, `C:\\Movies\\Terminator, The (1984)\\The.Terminator.(1984).mkv`]);
        /* 020 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Terminator 2: Judgment Day (1991)`, `C:\\Movies\\Terminator 2; Judgment Day (1991)\\Terminator.2.Judgment.Day.(1991).mkv`]);
        /* 021 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Terminator 3: Rise of the Machines (2003)`, `C:\\Movies\\Terminator 3; Rise of the Machines (2003)\\Terminator.3.Rise.of.the.Machines.(2003).mkv`]);
        /* 022 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Terminator Salvation (2009)`, `C:\\Movies\\Terminator Salvation (2009)\\Terminator.Salvation.(2009).mkv`]);

        /* 023 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Moulin Rouge! (2001)`, `C:\\Movies\\Moulin Rouge (2001)\\Moulin.Rouge.(2001).mkv`]);
        /* 024 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Romeo + Juliet (1996)`, `C:\\Movies\\Romeo Juliet (1996)\\Romeo.Juliet.(1996).mkv`]);

        /* 025 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Batman Forever (1995)`, `C:\\Movies\\Batman Forever (1995)\\Batman.Forever.(1995).mkv`]);
        /* 026 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Batman & Robin (1997)`, `C:\\Movies\\Batman Robin (1997)\\Batman.Robin.(1997).mkv`]);

        /* 027 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`The Chronicles of Narnia: The Lion, the Witch and the Wardrobe (2005)`, `C:\\Movies\\Chronicles of Narnia, The; Lion, the Witch and the Wardrobe, The (2005)\\The.Chronicles.of.Narnia.The.Lion.the.Witch.and.the.Wardrobe.(2005).mkv`]);
        /* 028 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`The Chronicles of Narnia: Prince Caspian (2008)`, `C:\\Movies\\Chronicles of Narnia, The; Prince Caspian (2008)\\The.Chronicles.of.Narnia.Prince.Caspian.(2008).mkv`]);

        /* 029 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Resident Evil (2002)`, `C:\\Movies\\Resident Evil (2002)\\Resident.Evil.(2002).mkv`]);
        /* 030 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Resident Evil: Apocalypse (2004)`, `C:\\Movies\\Resident Evil; Apocalypse (2004)\\Resident.Evil.Apocalypse.(2004).mkv`]);
        /* 031 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Resident Evil: Extinction (2007)`, `C:\\Movies\\Resident Evil; Extinction (2007)\\Resident.Evil.Extinction.(2007).mkv`]);

        /* 032 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`The Lord of the Rings (1978)`, `C:\\Movies\\Lord of the Rings, The (1978)\\The.Lord.of.the.Rings.(1978).mkv`]);
        /* 033 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`The Lord of the Rings: The Fellowship of the Ring (2001)`, `C:\\Movies\\Lord of the Rings, The; Fellowship of the Ring, The (2001)\\The.Lord.of.the.Rings.The.Fellowship.of.the.Ring.(2001).mkv`]);
        /* 034 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`The Lord of the Rings: The Two Towers (2002)`, `C:\\Movies\\Lord of the Rings, The; Two Towers, The (2002)\\The.Lord.of.the.Rings.The.Two.Towers.(2002).mkv`]);
        /* 035 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`The Lord of the Rings: The Return of the King (2003)`, `C:\\Movies\\Lord of the Rings, The; Return of the King, The (2003)\\The Lord of the Rings: The Return of the King (2003).mkv`]);

        /* 036 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Mad Max 2: The Road Warrior (1981)`, `C:\\Movies\\Mad Max 2; Road Warrior, The (1981)\\Mad.Max.2.The.Road.Warrior.(1981).mkv`]);
        /* 037 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Mad Max Beyond Thunderdome (1985)`, `C:\\Movies\\Mad Max Beyond Thunderdome (1985)\\Mad.Max.Beyond.Thunderdome.(1985).mkv`]);

        /* 038 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Lethal Weapon 3 (1992)`, `C:\\Movies\\Lethal Weapon 3 (1992)\\Lethal.Weapon.3.(1992).mkv`]);
        /* 039 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Lethal Weapon 4 (1998)`, `C:\\Movies\\Lethal Weapon 4 (1998)\\Lethal.Weapon.4.(1998).mkv`]);

        /* 040 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Contact (1997)`, `C:\\Movies\\Contact (1997)\\Contact.(1997).mkv`]);
        /* 041 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Outland (1981)`, `C:\\Movies\\Outland (1981)\\Outland.(1981).mkv`]);
        /* 042 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Executive Decision (1996)`, `C:\\Movies\\Executive Decision (1996)\\Executive.Decision.(1996).mkv`]);
        /* 043 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Air Force One (1997)`, `C:\\Movies\\Air Force One (1997)\\Air.Force.One.(1997).mkv`]);
        /* 044 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Conan the Barbarian (1982)`, `C:\\Movies\\Conan the Barbarian (1982)\\Conan.the.Barbarian.(1982).mkv`]);
        /* 045 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Soldier (1998)`, `C:\\Movies\\Soldier (1998)\\Soldier.(1998).mkv`]);
        /* 046 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`The Skeleton Key (2005)`, `C:\\Movies\\Skeleton Key, The (2005)\\The.Skeleton.Key.(2005).mkv`]);
        /* 047 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Quiz Show (1994)`, `C:\\Movies\\Quiz Show (1994)\\Quiz.Show.(1994).mkv`]);
        /* 048 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Dirty Harry (1971)`, `C:\\Movies\\Dirty Harry (1971)\\Dirty.Harry.(1971).mkv`]);
        /* 049 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`The Good, the Bad and the Ugly (1966)`, `C:\\Movies\\Good, the Bad and the Ugly, The (1966)\\The.Good.the.Bad.and.the.Ugly.(1966).mkv`]);
        /* 050 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Æon Flux (2005)`, `C:\\Movies\\Aeon Flux (2005)\\Aeon.Flux.(2005).mkv`]);
        /* 051 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Ultraviolet (2006)`, `C:\\Movies\\Ultraviolet (2006)\\Ultraviolet.(2006).mkv`]);
        /* 052 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`The Fifth Element (1997)`, `C:\\Movies\\Fifth Element, The (1997)\\The.Fifth.Element.(1997).mkv`]);
        /* 053 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Poltergeist (1982)`, `C:\\Movies\\Poltergeist (1982)\\Poltergeist.(1982).mkv`]);
        /* 054 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Apollo 13 (1995)`, `C:\\Movies\\Apollo 13 (1995)\\Apollo.13.(1995).mkv`]);
        /* 055 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Mission to Mars (2000)`, `C:\\Movies\\Mission to Mars (2000)\\Mission.to.Mars.(2000).mkv`]);
        /* 056 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Red Planet (2000)`, `C:\\Movies\\Red Planet (2000)\\Red.Planet.(2000).mkv`]);
        /* 057 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Carrie (1976)`, `C:\\Movies\\Carrie (1976)\\Carrie.(1976).mkv`]);
        /* 058 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Rose Red`, `C:\\Movies\\Rose Red (2002)\\Rose.Red.(2002).mkv`]);
        /* 059 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Snake Eyes (1998)`, `C:\\Movies\\Snake Eyes (1998)\\Snake.Eyes.(1998).mkv`]);
        /* 060 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Starship Troopers (1997)`, `C:\\Movies\\Starship Troopers (1997)\\Starship.Troopers.(1997).mkv`]);
        /* 061 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Twister (1996)`, `C:\\Movies\\Twister (1996)\\Twister.(1996).mkv`]);
        /* 062 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`I, Robot (2004)`, `C:\\Movies\\I, Robot (2004)\\I.Robot.(2004).mkv`]);
        /* 063 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Dark City (1998)`, `C:\\Movies\\Dark City (1998)\\Dark.City.(1998).mkv`]);
        /* 064 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Speed (1994)`, `C:\\Movies\\Speed (1994)\\Speed.(1994).mkv`]);
        /* 065 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`The Thirteenth Floor (1999)`, `C:\\Movies\\Thirteenth Floor, The (1999)\\The.Thirteenth.Floor.(1999).mkv`]);
        /* 066 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Se7en (1995)`, `C:\\Movies\\Se7en (1995)\\Se7en.(1995).mkv`]);
        /* 067 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Shrek (2001)`, `C:\\Movies\\Shrek (2001)\\Shrek.(2001).mkv`]);
        /* 068 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`The Quick and the Dead (1995)`, `C:\\Movies\\Quick and the Dead, The (1995)\\The.Quick.and.the.Dead.(1995).mkv`]);
        /* 069 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Eraser (1996)`, `C:\\Movies\\Eraser (1996)\\Eraser.(1996).mkv`]);
        /* 070 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Total Recall (1990)`, `C:\\Movies\\Total Recall (1990)\\Total.Recall.(1990).mkv`]);
        /* 071 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Sphere (1998)`, `C:\\Movies\\Sphere (1998)\\Sphere.(1998).mkv`]);
        /* 072 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`End of Days (1999)`, `C:\\Movies\\End of Days (1999)\\End.of.Days.(1999).mkv`]);
        /* 073 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Predator (1987)`, `C:\\Movies\\Predator (1987)\\Predator.(1987).mkv`]);
        /* 074 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Die Hard (1988)`, `C:\\Movies\\Die Hard (1988)\\Die.Hard.(1988).mkv`]);
        /* 075 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`The 6th Day (2000)`, `C:\\Movies\\6th Day (2000), The\\The.6th.Day.(2000).mkv`]);
        /* 076 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Equilibrium (2002)`, `C:\\Movies\\Equilibrium (2002)\\Equilibrium.(2002).mkv`]);
        /* 077 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Demolition Man (1993)`, `C:\\Movies\\Demolition Man (1993)\\Demolition.Man.(1993).mkv`]);
        /* 078 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`The Fog (1980)`, `C:\\Movies\\Fog, The (1980)\\The.Fog.(1980).mkv`]);
        /* 079 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Christine (1983)`, `C:\\Movies\\Christine (1983)\\Christine.(1983).mkv`]);
        /* 080 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`The Thing (1982)`, `C:\\Movies\\Thing, The (1982)\\The.Thing.(1982).mkv`]);
        /* 081 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Village of the Damned (1995)`, `C:\\Movies\\Village of the Damned (1995)\\Village.of.the.Damned.(1995).mkv`]);
        /* 082 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Vampires (1998)`, `C:\\Movies\\Vampires (1998)\\Vampires.(1998).mkv`]);
        /* 083 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`The Messenger: The Story of Joan of Arc (1999)`, `C:\\Movies\\Messenger; The Story of Joan of Arc, The (1999)\\The.Messenger.The.Story.of.Joan.of.Arc.(1999).mkv`]);
        /* 084 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Stealth (2005)`, `C:\\Movies\\Stealth (2005)\\Stealth.(2005).mkv`]);
        /* 085 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Next (2007)`, `C:\\Movies\\Next (2007)\\Next.(2007).mkv`]);
        /* 086 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`Maverick (1994)`, `C:\\Movies\\Maverick (1994)\\Maverick.(1994).mkv`]);
        /* 087 */ await this.addMovie(undefined, undefined, [`title`, `mediaFullPath`], [`The Perfect Storm (2000)`, `C:\\Movies\\Perfect Storm, The (2000)\\The.Perfect.Storm.(2000).mkv`]);


    }
}

